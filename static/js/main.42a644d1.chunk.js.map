{"version":3,"sources":["utils/constants.js","api/getData.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","data","getPosts","getUsers","getComments","User","user","name","email","address","street","suite","city","zipcode","className","Comment","comment","body","CommentList","commentList","map","key","id","Post","post","author","title","postComments","length","PostList","postlist","postItem","App","useState","postsList","setPostsList","visiblePosts","setVisiblePosts","isLoading","setLoading","isLoaded","setLoaded","noResults","setNoResults","loadPosts","Promise","all","posts","users","comments","postsData","combinedData","find","person","userId","filter","postId","onInput","event","searchValue","target","value","toLowerCase","trim","searchedPosts","includes","placeholder","type","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42a644d1.chunk.js","sourcesContent":["export const API_URL = 'https://jsonplaceholder.typicode.com';\n","import { API_URL } from '../utils/constants';\nimport { PostType, UserType, CommentType } from '../utils/interfaces';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\nexport const getPosts = async (): Promise<PostType[]> => {\n  return getData<PostType[]>(`${API_URL}/posts`);\n};\n\nexport const getUsers = async (): Promise<UserType[]> => {\n  return getData<UserType[]>(`${API_URL}/users`);\n};\n\nexport const getComments = async (): Promise<CommentType[]> => {\n  return getData<CommentType[]>(`${API_URL}/comments`);\n};\n","import React, { FC } from 'react';\nimport './User.css';\nimport { UserType } from '../../utils/interfaces';\n\ninterface Props {\n  user: UserType;\n}\n\nexport const User: FC<Props> = (user) => {\n  const {\n    user: {\n      name,\n      email,\n      address: {\n        street,\n        suite,\n        city,\n        zipcode,\n      },\n    },\n  } = user;\n\n  return (\n    <div className=\"user\">\n      <h3>{name}</h3>\n      <p>{email}</p>\n      <address>\n        <span>\n          {`${zipcode}, ${city}, ${street}, ${suite}`}\n        </span>\n      </address>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\nimport { CommentType } from '../../utils/interfaces';\n\ninterface Props {\n  comment: CommentType;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <div className=\"comment\">\n      <p className=\"comment__name\">\n        {`${name} (${email})`}\n      </p>\n      <p className=\"comment__body\">\n        {body}\n      </p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentType } from '../../utils/interfaces';\n\ninterface Props {\n  commentList: CommentType[];\n}\n\nexport const CommentList: FC<Props> = ({ commentList }) => (\n  <div>\n    {commentList.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </div>\n);\n","import React, { FC } from 'react';\nimport './Post.css';\nimport { PreparedPostType } from '../../utils/interfaces';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  post: PreparedPostType;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    author,\n    title,\n    body,\n    postComments,\n  } = post;\n\n  return (\n    <div className=\"postItem\">\n      <User user={author} />\n      <h2>{title}</h2>\n      <p>{body}</p>\n      {`Comments: ${post.postComments.length}`}\n      <CommentList commentList={postComments} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { PreparedPostType } from '../../utils/interfaces';\nimport { Post } from '../Post/Post';\nimport './PostList.css';\n\ninterface Props {\n  postlist: PreparedPostType[];\n}\n\nexport const PostList: FC<Props> = ({ postlist }) => (\n  <div className=\"postlist\">\n    {postlist.map(postItem => (\n      <Post key={postItem.id} post={postItem} />\n    ))}\n  </div>\n);\n","import React, { FC, useState } from 'react';\nimport './App.css';\n\nimport { PreparedPostType, UserType } from './utils/interfaces';\nimport { getPosts, getUsers, getComments } from './api/getData';\nimport { PostList } from './components/PostList/PostList';\n\nconst App: FC = () => {\n  const [postsList, setPostsList] = useState<PreparedPostType[]>([]);\n  const [visiblePosts, setVisiblePosts] = useState<PreparedPostType[]>([]);\n\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n  const [noResults, setNoResults] = useState(false);\n\n  const loadPosts = async () => {\n    setLoading(true);\n    const [posts, users, comments] = await Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments(),\n    ]);\n\n    const postsData = [...posts];\n    const combinedData = postsData.map((post) => {\n      const author = users.find(person => person.id === post.userId) as UserType;\n      const postComments = comments\n        .filter(comment => comment.postId === post.id);\n\n      return {\n        ...post,\n        author,\n        postComments,\n      };\n    });\n\n    setVisiblePosts(combinedData);\n    setPostsList(combinedData);\n    setLoaded(true);\n  };\n\n  const searchPosts = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNoResults(false);\n    const searchValue = event.target.value.toLowerCase().trim();\n\n    const searchedPosts = [...postsList]\n      .filter(post => (post.title + post.body)\n        .toLowerCase()\n        .trim()\n        .includes(searchValue));\n\n    setNoResults(!searchedPosts.length);\n    setVisiblePosts(searchedPosts);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Static list of posts</h1>\n      {!isLoaded\n        ? (\n          <button\n            className=\"button\"\n            type=\"button\"\n            disabled={isLoading}\n            onClick={loadPosts}\n          >\n            {isLoading ? ('Loading...') : ('Load Posts')}\n          </button>\n        )\n        : (\n          <>\n            <input\n              className=\"search-bar\"\n              onInput={searchPosts}\n              placeholder=\"Try &quot;qui est esse&quot;\"\n            />\n            {noResults\n              ? (<p>No results! :(</p>)\n              : (<PostList postlist={visiblePosts} />)}\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}